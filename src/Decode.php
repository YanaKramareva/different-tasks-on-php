<?php

/*
 * NRZI код (Non Return to Zero Invertive) — один из способов линейного кодирования.
 *  Обладает двумя уровнями сигнала и используется для передачи битовых последовательностей,
 * содержащих только 0 и 1. NRZI применяется, например, в оптических кабелях, где устойчиво
 * распознаются только два состояния сигнала — свет и темнота.

Принцип кодирования
При передаче логического нуля на вход кодирующего устройства передается потенциал,
установленный на предыдущем такте (то есть состояние потенциала не меняется),
а при передаче логической единицы потенциал инвертируется на противоположный.
Реализуйте функцию decode(), которая принимает cтроку в виде графического представления линейного сигнала и
 возвращает строку с бинарным кодом.

Примеры
<?php

$signal = '_|¯|____|¯|__|¯¯¯';
decode($signal); // '011000110100'

$signal_2 = '|¯|___|¯¯¯¯¯|___|¯|_|¯';
decode($signal_2); // '110010000100111'

$signal_3 = '¯|___|¯¯¯¯¯|___|¯|_|¯';
decode($signal_3); // '010010000100111'
Подсказки
Символ | в строке указывает на переключение сигнала и означает, что уровень сигнала в
следующем такте, будет изменён на противоположный по сравнению с предыдущим.

К сожалению, str_split умеет работать только с ASCII символами, поэтому для разделения
 строки на символы используйте конструкцию preg_split("//u", $str, -1, PREG_SPLIT_NO_EMPTY);, где $str - строка.

function decode($str)
{
    $symbols = preg_split("//u", $str, -1, PREG_SPLIT_NO_EMPTY);

    $mapped = array_map(function ($key) use ($symbols) {
        if ($symbols[$key] === '|') {
            return '';
        }
        if ($key === 0) {
            return 0;
        }
        return $symbols[$key - 1] === '|' ? 1 : 0;
    }, array_keys($symbols));

    return implode('', $mapped);
}

// Альтернативное решение без использования
// функций высшего порядка
// function decode($str)
// {
//     $result = str_replace(['|¯', '|_'], '1', $str);
//     $result = str_replace(['¯', '_'], '0', $result);
//
//     return rtrim($result, '|');
// }

 */

namespace App\Nrzi;

function decode($str)
{
    if ($str === '' || $str === '|') {
        return '';
    }
    $signals =  mb_str_split($str);
    $result = array_map(fn($signal) => ($signal === "|" ? 1 : 0), $signals);
    return str_replace("10", "1", implode($result));
}
