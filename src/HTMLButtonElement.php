<?php

namespace App;

/*
 * Реализуйте механизм валидации для каждого элемента DOM, который проверяет переданные атрибуты на допустимость.

<?php

$img1 = new HTMLImgElement(['class' => 'rounded', 'src' => 'path/to/image']);
$img1->isValid(); // true

$img2 = new HTMLImgElement(['class' => 'rounded', 'href' => 'path/to/image']);
$img2->isValid(); // false

$button1 = new HTMLButtonElement(['class' => 'rounded', 'type' => 'button']);
$button1->isValid(); // true

$button2 = new HTMLButtonElement(['class' => 'rounded']);
$button2->isValid(); // false
src/HTMLElement.php
Определите абстрактный метод isValid()

src/HTMLImgElement.php
Реализуйте метод isValid, который проверяет соответствие между переданными атрибутами и допустимыми атрибутами.
Для тега Img допустимыми являются: name, class, src. Причём name и class допустимы для любого элемента.
 Поэтому информация о них должна находиться в базовом классе.

src/HTMLButtonElement.php
Реализуйте валидацию по аналогии как для тега Img. Для тега Button допустимыми являются: name, class, type.
 Причём атрибут type, является обязательным и может принимать одно из доступных значений: button, submit, reset.
class HTMLButtonElement extends HTMLElement
{
    private const ATTRIBUTE_NAMES = ['type'];
    private const TYPE_NAMES = ['button', 'submit', 'reset'];

    public static function getAttributeNames()
    {
        return array_merge(parent::getAttributeNames(), static::ATTRIBUTE_NAMES);
    }

    // BEGIN
    public function isValid()
    {
        $attributes = $this->getAttributes();
        $names = array_keys($attributes);
        $diff = array_diff($names, $this->getAttributeNames());

        return empty($diff)
            && array_key_exists('type', $attributes)
            && in_array($attributes['type'], static::TYPE_NAMES);
    }
    // END
}
Подсказки
array_diff
 */

class HTMLButtonElement extends HTML3Element
{
    private const ATTRIBUTE_NAMES = ['type'];
    private const TYPE_NAMES = ['button', 'submit', 'reset'];

    public static function getAttributeNames()
    {
        return array_merge(parent::getAttributeNames(), static::ATTRIBUTE_NAMES);
    }

    // BEGIN (write your solution here)
    public function __construct($attributes = [])
    {
        if ($attributes !== []) {
            parent::__construct($attributes);
        }
    }

    public static function getTypeNames()
    {
        return self::TYPE_NAMES;
    }

    public function getAttributes()
    {
        return parent::getAttributes(); // TODO: Change the autogenerated stub
    }

    public function isValid(): bool
    {
        $attributes = $this->getAttributes();
        if (array_key_exists('type', $attributes)) {
            return (in_array($attributes['type'], self::TYPE_NAMES)) && parent::isValid();
        } else {
            return false;
        }
    }
    // END
}
